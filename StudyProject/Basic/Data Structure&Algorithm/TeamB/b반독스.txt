일반적으로 weak ordering을 수행하는 방법은 두 가지입니다.

Stable Sorting Algorithm 사용:
알고리즘은 요소를 순서대로 정렬하고 같은 값을 가지는 요소는 상대적인 순서를 유지합니다. 예를 들어, Quick Sort 대신 Merge Sort 또는 Heap Sort와 같은 stable sorting 알고리즘을 사용하면 됩니다.

Compare Function 사용:
Compare function을 사용하여 요소간의 상대적인 순서를 결정할 수 있습니다. 예를 들어, C++에서는 std::sort() 함수를 사용하여 weak ordering을 구현할 수 있습니다. 이 함수는 두 개의 인수를 취하는 비교 함수를 인수로 받습니다. 비교 함수는 두 개의 인수를 비교하고, 첫 번째 인수가 두 번째 인수보다 작으면 true를 반환하고, 그렇지 않으면 false를 반환합니다.

아래는 C++에서 std::sort() 함수를 사용하여 weak ordering을 구현하는 예시입니다.


dev랑 vs스튜디오랑 어떤 차이가 있는지 알 수 있을까요??

dev랑 vs 스튜디오 차이는 dev는 vs스튜디오보다 쉽고 간편하게 쓸 수 있으나, c++만 사용가능하다.
또한 비주얼 c++은 구버전, 신버전의 c++모두를 지원하나 dev는 신버전만 지원한다.
예를들면 main함수의 리턴값은 void로 하면 오류 iostream도 신버전 양식을 따라야 한다.

	실행 방법이 다르다. F11, F5


dev는 GNU 컴파일러를 사용하지만, vs 스튜디오는 자체 컴파일러를 사용한다.
코딩테스트는 dev권장

dev gcc컴파일러 : GNU 컴파일러 모음 (GNU Compiler Collection)은 GNU 프로젝트의 일환으로 개발되어 널리 쓰이고 있는 컴파일러 입니다.

vs 자체컴파일러 


	

DFS와 BFS의 차이점은 무엇이며 문제의 유형에 따라 어떤것을 사용하는 것이 적합한가

	적합한 것은 상황에 따라 다르다. DFS는 깊이우선탐색, BFS는 너비우선탐색이며
그래프 탐색에서는 문제의 성격과 구조에 따라 DFS와 BFS 중 적절한 알고리즘을 선택해야 합니다. 깊이 우선 탐색(DFS)은 재귀적으로 구현이 간단하고, 메모리 사용이 적으며, 미로 찾기나 사이클 찾기와 같은 깊이가 중요한 문제에서 사용하면 좋습니다. 반면, 너비 우선 탐색(BFS)은 최단 경로를 찾는 문제나 두 노드 사이의 최단 거리를 구하는 문제에서 사용하면 좋습니다.


	트리에서 DFS는 스택(혹은 재귀)사용용, BFS 큐를 사용.
BFS는 재귀적으로 동작하지 않는다.




	DFS는 스택또는 재귀함수로 구현, BFS는 큐를 이용하여 구현
	최단거리를 구하는 데는 BFS가 유리하며, 검색 규모가 크다면 DFS가 유리하다
	BFS의 검색속도가 더 빠르다




dfs 깊이우선탐색 : 루트노드에서 시작해 다음 분기로 넘어가기 전 해당 분기를 완벽하게 탐색하는 방식을 말한다.
bfs 너비우선탐색 :  루트노드에서 시작해 인접한 노드를 먼저 탐색하는 방식으로 시작 정점으로부터 가까운 정점을 먼저 방문하고 멀리 떨어져 있는 정점을 나중에 방문하는 순회 방법이다.
검색 속도 자체는 BFS가 빠르지만 DFS가 더 간단하다.

검색 대상 그래프가 크거나 경로의 특징을 저장해둬야 하는 문제는 DFS를,
검색 대상의 규모가 크지 않고 최단거리를 구해야 하는 문제는 BFS가 유리하다.
DFS는 스택 또는 재귀함수(느림)로 구현하고 BFS는 큐를 이용해서 구현한다.

 





 Dynamic programming을 어떤 문제에 사용할 수 있을까

	피보나치 수열
	


큰 문제를 작게 나누고, 같은 문제라면 한 번씩만 풀어 문제를 효율적으로 해결하는 알고리즘 기법
작은 문제의 답은 항상 같으므로 작은 문제들을 푼 결과값을 저장해놓고 점차 큰 문제를 풀 때에 그 결과값을 이용하여 연산 시간을 줄이는 것이다.



동적 계획법이라고도 불리는 다이나믹 프로그래밍은 큰 문제를 작은 문제로 나누어 푸는 알고리즘을 뜻한다. 동적으로 작동하는 프로그래밍이라는 직관적인 의미를 가지고 있지는 않다. Dynamic Programming이라고 이름을 붙인 사람도 이 말이 멋있게 느껴져 이 이름을 붙였다고 말한 바 있다.

대표적인 예시는 바로 피보나치 수열이다. 피보나치 수열은 1, 1, 2, 3, 5, 8, 13...의 형태로 증가하게 된다. a, b, (a+b), b+(a+b)의 순으로 수가 증가하게 되는 것인데, 수가 커지게 되면 함수의 값도 기하급수적으로 증가하기 때문에 일정 수 이상의 수열을 구하기가 쉽지 않다. 그렇지만 위에서 말한 다이나믹 프로그래밍의 성립 조건 두 가지를 떠올려 보면, 그것을 이용하여 피보나치 수열을 풀 수 있다는 사실을 알 수 있다.


DP는 보통 최적화 문제나 카운팅 문제에서 사용됩니다. 예를 들면, 피보나치 수열이나 최장 증가 부분 수열 등은 DP를 이용하여 효율적으로 해결할 수 있습니다. 또한 배낭 문제나 금광 문제, 최단 경로 문제 등 다양한 최적화 문제에서 DP가 사용됩니다.



 weak ordering으로 순서 매기는 방법
연산자자
일반적으로 weak ordering을 수행하는 방법은 두 가지입니다.

Stable Sorting Algorithm 사용:
알고리즘은 요소를 순서대로 정렬하고 같은 값을 가지는 요소는 상대적인 순서를 유지합니다. 예를 들어, Quick Sort 대신 Merge Sort 또는 Heap Sort와 같은 stable sorting 알고리즘을 사용하면 됩니다.

Compare Function 사용:
Compare function을 사용하여 요소간의 상대적인 순서를 결정할 수 있습니다. 예를 들어, C++에서는 std::sort() 함수를 사용하여 weak ordering을 구현할 수 있습니다. 이 함수는 두 개의 인수를 취하는 비교 함수를 인수로 받습니다. 비교 함수는 두 개의 인수를 비교하고, 첫 번째 인수가 두 번째 인수보다 작으면 true를 반환하고, 그렇지 않으면 false를 반환합니다.




1. 모든 x에 대해 x < x는 거짓
2. 모든 x, y에 대해 x < y이면 y < x는 거짓
3. 모든 x, y, z에 대해 x < y이고 y < z이면 x < z 
4. 모든 x, y, z에 대해 x == y이고 y == z이면 x == z 


* cmp(a, a) == false
* 만약 cmp(a, b) == true 이면 cmp(b, a) == false
* 만약 cmp(a, b) == true 이고, 동시에 cmp(b, c) == true 이면 cmp(a, c) == true


 matrix chain multiplication으로 최소횟수를 구하는 방법
	
Matrix Chain Multiplication은 행렬곱셈순서 문제이다.
어떤 다수의 행렬이 있을 때, 괄호를 어디에 위치시키는지에 따라 최종 결과는 같지만 곱셈의 계산량이 달라진다. 왜냐하면, 행렬을 곱하기 위해서는 행렬의 크기가 중요한데, 예를 들어 p x q 행렬을 q x r 행렬과 곱한다면 총 연산 횟수는 p x q x r이 되기 때문이다.



dp알고리즘을 이용해서 행렬곱을 구한다. 이미 수행한 연산은 제외




DP[i][j] = i번째 행렬부터 j번째행렬까지 최소 연산 횟수
